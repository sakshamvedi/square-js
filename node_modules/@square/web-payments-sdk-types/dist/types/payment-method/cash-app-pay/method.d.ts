import { PaymentMethod, SqEvent } from '../payment-method-types';
import { CashAppPayButtonOptions, CashAppPayEventType, CashAppPayEventData } from './types';
/**
 * Create a CashAppPay method instance
 *
 * @example
 * const paymentRequest = payments.paymentRequest({
 *   countryCode: 'US',
 *   currencyCode: 'USD',
 *   total: { amount: '5.79', label: 'Total', pending: false },
 * });
 *
 * const options = {
 *   redirectURL: window.location.href,
 *   referenceId: 'my-distinct-reference-id',
 * };
 *
 * const cashAppPay = await payments.cashAppPay(req, options);
 *
 * cashAppPay.addEventListener('ontokenization', (event) => {
 *   const { tokenResult } = event.detail;
 *   const tokenStatus = tokenResult.status;
 *   if (tokenStatus === 'OK') {
 *     const token = tokenResult.token;
 *   }
 * });
 *
 * await cashAppPay.attach('#cashAppPay');
 */
interface CashAppPay extends PaymentMethod {
    /**
     * Attaches the `CashAppPay` object
     *
     * @returns {Promise<void>} - A promise that resolves when the button has attached to the page
     * @param selectorOrElement - A valid selector or HTMLElement of an empty <div> or <span>
     * where the Cash App Pay button will be inserted.
     * @param options - Cash App Pay button options. Passing `false` will prevent a button render and will instead attach the handlers to the element passed in.
     * - `values` is deprecated, please use `theme` instead.
     * @param shouldTokenize - A validation function that is called when the buyer clicks the button.
     *
     * @example
     * await cashAppPay.attach(`#${selectorId}`, { cashAppButtonOptions });
     * @throws {PaymentMethodAlreadyDestroyedError} Cash App Pay was already destroyed
     * @throws {PaymentMethodNotAttachedError} Cash App Pay was not attached
     * @throws {InvalidCashAppPayOptionsFieldTypes} Cash App Pay button options has invalid types
     * @throws {InvalidCashAppPayOptionsFieldValues} Cash App Pay button options has invalid values
     */
    attach(selectorOrElement: string | HTMLElement, options?: CashAppPayButtonOptions | false, shouldTokenize?: () => Promise<boolean>): Promise<void>;
    /**
     * Destroys this `CashAppPay` object. The attached element is emptied and all event listeners are removed.
     *
     * @returns {Promise<boolean>} A promise which resolves when the `CashAppPay` instance is destroyed
     *
     * @example
     * await cashAppPay.destroy();
     */
    destroy(): Promise<boolean>;
    /**
     * Detach the Cash App Pay payment object.
     * This is different from *Destroy* as this method only removes the Cash App Pay element and allows the developer to
     * re-attach it to the page when they want to display it again.
     *
     * This functionality is helpful for frameworks in which the component that holds the Cash App Pay element can be removed
     * from the page, and then re-appear later, such as a buyer navigating back through the payment flow. Since Web Payments SDK
     * does not allow developers to re-attach an existing element, the developer should call detach when a component is removed/unmounted
     * from the page, and can then call attach again when the component is mounted.
     * @example
     * await cashAppPay.detach();
     * @throws {PaymentMethodAlreadyDestroyedError} `CashAppPay` has already been destroyed
     */
    detach(): Promise<boolean>;
    /**
     * Adds an event listener to the `CashAppPay` instance
     * @param {string} eventType The Cash App Pay event type to listen for
     * @param {(event: unknown) => void} callback The method that is involved in the callback
     * @example
     * const callback = async (event) => {
     *   const { tokenResult } = event.detail;
     *   const tokenStatus = tokenResult.status;
     *   if (tokenStatus === 'OK') {
     *     const token = tokenResult.token;
     *   }
     * }
     * cashAppPay.addEventListener("ontokenization", callback);
     */
    addEventListener(eventType: CashAppPayEventType, callback: (event: SqEvent<CashAppPayEventData>) => void): void;
    /**
     * Removes an event listener from the `CashAppPay` instance
     * @param {string} eventType The event type to stop listening to
     * @param {(event: unknown) => void} callback The method that is invoked on the callback
     * @example
     * cashAppPay.removeEventListener("ontokenization", callback);
     */
    removeEventListener(eventType: CashAppPayEventType, callback: (event: SqEvent<CashAppPayEventData>) => void): void;
}
export { CashAppPay };
