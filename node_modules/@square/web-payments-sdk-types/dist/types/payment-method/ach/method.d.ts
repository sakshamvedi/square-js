import { AchTokenOptions, PaymentMethod, SqEvent, TokenizationEvent, TokenResult } from '../payment-method-types';
import { PlaidEventName } from './types';
/**
 * The ACH Payment Method
 *
 * When initializing the ACH payment method, the developer is expected to provide a redirectURI and transactionID.
 *
 * @example
 * const ach = await payments.ach({
 *   redirectURI: window.location.href,
 *   transactionId: 'my-distinct-transaction-id',
 * )};
 *
 * const achButton = document.getElementById('ach-button')
 * const buyerNameField = document.getElementById('buyer-name-field');
 *
 * ach.addEventListener('ontokenization', (event) => {
 *   const { tokenResult, error } = event.detail;
 *
 *   if (error) {
 *     const errorMessage = `Tokenization failed with status: ${error}`;
 *     throw new Error(errorMessage);
 *   }
 *
 *   if (tokenResult.status === 'OK') {
 *     console.log('got payment token: ', tokenResult.token);
 *   }
 * });
 *
 * achButton.onclick = () => {
 *   try {
 *     ach.tokenize({ accountHolderName: buyerNameField.value });
 *   }
 *   catch (e) {
 *     // handle error
 *   }
 * }
 */
interface ACH extends PaymentMethod {
    /**
     * Trigger the ACH authentication flow..
     * @example
     * const achButton = document.getElementById('ach-button')
     * const buyerNameField = document.getElementById('buyer-name-field');
     * achButton.onclick = () => {
     *   try {
     *     ach.tokenize({
     *       accountHolderName: 'Bryce',
     *     });
     *   } catch (e) {
     *     // Something went wrong
     *     console.error(e);
     *   }
     * };
     * @throws {PlaidMissingNameError} `{ accountHolderName: string }` is a required parameter
     * @throws {TokenizationError} The bank transfer request could not be tokenized
     */
    tokenize(options: AchTokenOptions): Promise<TokenResult>;
    /**
     * Destroys the ACH payment method. The attached element is emptied and all event listeners are removed.
     *
     * @returns {Promise} A promise which resolves when the ACH instance is destroyed
     * @example
     * await ach.destroy();
     */
    destroy(): Promise<boolean>;
    /**
     * Adds an event listener to the instance of ach.
     * See the Plaid documentation for supported event types and expected metadata.
     * https://plaid.com/docs/#onevent-callback
     * @param {PlaidEventName} eventType The Plaid event type to listen for
     * @param {(event: unknown) => void} callback The method that is invoked on the callback
     * @example
     * const callback = async (metadata) => {
     *   alert(`Buyer searched for an institution using query ${metadata.institution_search_query}`);
     * };
     * ach.addEventListener("SEARCH_INSTITUTION", callback);
     * Use the token returned during the ontokenization event to process the payment on your server.
     *
     * Note: If the buyer cancels by closing the Plaid window without completing the
     * transaction, an error is provided as part of event.detail
     * ach.addEventListener('ontokenization', (event) => {
     *   const { tokenResult, error } = event.detail;
     *
     *   if (error) {
     *     const errorMessage = `Tokenization failed with status: ${error}`;
     *     throw new Error(errorMessage);
     *   }
     *
     *   if (tokenResult.status === 'OK') {
     *     console.log('got payment token: ', tokenResult.token);
     *   }
     * });
     */
    addEventListener(eventType: PlaidEventName, callback: (event: SqEvent<TokenizationEvent>) => void): void;
    /**
     * Removes an event listener from the instance of ach.
     * @param {PlaidEventName} eventType The Plaid event type to stop listening for
     * @param {(event: unknown) => void} callback The method that is invoked on the callback
     * @example
     * ach.removeEventListener("SEARCH_INSTITUTION", callback);
     */
    removeEventListener(eventType: PlaidEventName, callback: (event: SqEvent) => void): void;
}
export { ACH };
